<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AH/+AYB//gMAf/8fGP///x////k////5//8=
</value>
  </data>
</root>